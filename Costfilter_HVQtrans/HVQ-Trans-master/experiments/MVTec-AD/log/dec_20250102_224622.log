[2025-01-02 22:46:22,554][   train_val.py][line:  90][    INFO] args: Namespace(config='./config_visa.yaml', evaluate=False, local_rank=None, train_only_four_decoder=False)
[2025-01-02 22:46:22,555][   train_val.py][line:  91][    INFO] config: {'criterion': [{'kwargs': {'weight': 1.0},
                'name': 'FeatureMSELoss',
                'type': 'FeatureMSELoss'}],
 'dataset': {'batch_size': 16,
             'image_reader': {'kwargs': {'color_mode': 'RGB',
                                         'image_dir': '/home/customer/Desktop/ZZ/anomaly/GLAD-main/hdd/Datasets/VisA_pytorch'},
                              'type': 'opencv'},
             'input_size': [224, 224],
             'pixel_mean': [0.485, 0.456, 0.406],
             'pixel_std': [0.229, 0.224, 0.225],
             'test': {'meta_file': '../../data/VISA/test.json'},
             'train': {'hflip': False,
                       'meta_file': '../../data/VISA/train.json',
                       'rebalance': False,
                       'rotate': False,
                       'vflip': False},
             'type': 'custom',
             'workers': 4},
 'evaluator': {'eval_dir': './result_eval_temp_VisA_from0',
               'key_metric': 'mean_max_auc',
               'metrics': {'auc': [{'name': 'std'},
                                   {'kwargs': {'avgpool_size': [16, 16]},
                                    'name': 'max'},
                                   {'name': 'pixel'}]},
               'save_dir': 'result_eval_temp_VisA_from0',
               'vis_compound': {'max_score': None,
                                'min_score': None,
                                'save_dir': 'checkpoints/HVQ_TR_switch_OT_VisA_from0/vis_compound_HVQ_TR_switch_OT/visual_VisA_from0'}},
 'exp_path': '.',
 'frozen_layers': ['backbone'],
 'log_path': './log/',
 'net': [{'frozen': True,
          'kwargs': {'outlayers': [1, 2, 3, 4], 'pretrained': True},
          'name': 'backbone',
          'type': 'models.backbones.efficientnet_b4'},
         {'kwargs': {'outstrides': [16]},
          'name': 'neck',
          'prev': 'backbone',
          'type': 'models.necks.MFCN'},
         {'kwargs': {'activation': 'relu',
                     'dim_feedforward': 1024,
                     'dropout': 0.1,
                     'feature_jitter': {'prob': 1.0, 'scale': 20.0},
                     'hidden_dim': 256,
                     'initializer': {'method': 'xavier_uniform'},
                     'neighbor_mask': {'mask': [True, True, True],
                                       'neighbor_size': [7, 7]},
                     'nhead': 8,
                     'normalize_before': False,
                     'num_decoder_layers': 4,
                     'num_encoder_layers': 4,
                     'pos_embed_type': 'learned',
                     'save_recon': {'save_dir': 'result_recon_VisA_from0'}},
          'name': 'reconstruction',
          'prev': 'neck',
          'type': 'models.reconstructions.HVQ_TR_switch_OT'}],
 'port': 11111,
 'random_seed': 1234,
 'save_path': './checkpoints/HVQ_TR_switch_OT_VisA_from0',
 'saver': {'always_save': False,
           'auto_resume': False,
           'load_path': 'checkpoints',
           'log_dir': 'log/',
           'resume_model': '/home/customer/Desktop/ZZ/anomaly/HVQ-Trans-master/experiments/MVTec-AD/checkpoints/HVQ_TR_switch_OT_VisA/ckpt_best.pth.tar',
           'save_dir': 'checkpoints/HVQ_TR_switch_OT_VisA_from0'},
 'trainer': {'clip_max_norm': 0.1,
             'lr_scheduler': {'kwargs': {'gamma': 0.1, 'step_size': 800},
                              'type': 'StepLR'},
             'max_epoch': 1000,
             'optimizer': {'kwargs': {'betas': [0.9, 0.999],
                                      'lr': 0.0001,
                                      'weight_decay': 0.0001},
                           'type': 'AdamW'},
             'print_freq_step': 80,
             'tb_freq_step': 1,
             'val_freq_epoch': 10},
 'version': 'v1.0.0'}
[2025-01-02 22:47:05,728][       utils.py][line: 719][    INFO]  not exist, load from https://github.com/lukemelas/EfficientNet-PyTorch/releases/download/1.0/efficientnet-b4-6ed6700e.pth
[2025-01-02 22:47:09,604][       utils.py][line: 740][    INFO] Loaded ImageNet pretrained efficientnet-b4
[2025-01-02 22:47:29,584][   train_val.py][line: 121][    INFO] layers: ['backbone', 'neck', 'reconstruction']
[2025-01-02 22:47:29,584][   train_val.py][line: 122][    INFO] active layers: ['reconstruction', 'neck']
[2025-01-02 22:47:56,146][custom_dataset.py][line:  41][    INFO] building CustomDataset from: ../../data/VISA/train.json
[2025-01-02 22:47:56,273][custom_dataset.py][line:  41][    INFO] building CustomDataset from: ../../data/VISA/test.json
[2025-01-02 22:47:59,811][   train_val.py][line: 308][    INFO] Epoch: [1/1000]	Iter: [1/542000]	Time 3.48 (3.48)	Data 1.66 (1.66)	Loss 10.32390 (10.32390)	LR 0.00010	
[2025-01-02 22:48:35,428][   train_val.py][line: 308][    INFO] Epoch: [1/1000]	Iter: [81/542000]	Time 0.45 (0.44)	Data 0.00 (0.00)	Loss 9.92026 (10.01817)	LR 0.00010	
